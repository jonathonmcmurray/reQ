{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"reQ Open source HTTP requests library for kdb+/q A more fully-featured alternative to kdb+ built-in functions .Q.hg and .Q.hp , which provide basic HTTP query functionality. Features include: Support for custom headers Cookies Automatic conversion of JSON response to kdb+ object Backwards compatible with older versions of kdb+ - tested from v2.8+ Follows HTTP redirection Verbose mode to show raw requests & responses","title":"Overview"},{"location":"#req","text":"Open source HTTP requests library for kdb+/q A more fully-featured alternative to kdb+ built-in functions .Q.hg and .Q.hp , which provide basic HTTP query functionality. Features include: Support for custom headers Cookies Automatic conversion of JSON response to kdb+ object Backwards compatible with older versions of kdb+ - tested from v2.8+ Follows HTTP redirection Verbose mode to show raw requests & responses","title":"reQ"},{"location":"api/md/b64/","text":".b64.enc","title":"B64"},{"location":"api/md/b64/#b64enc","text":"","title":".b64.enc"},{"location":"api/md/private/","text":".auth.getauth EXPERIMENTAL prompt for authorization if requested Parameters: Name Type Description h dict HTTP response headers u string | symbol | hsym URL File symbol Returns: Type Description string updated URL with supplied credentials .auth.getcache get cached auth string for a given host Parameter: Name Type Description hst string hostname Returns: Type Description string cached auth string .auth.readnetrc retrieve login from .netrc file Parameter: Name Type Description host string hostname to get login for Returns: Type Description string auth string in format \"user:pass\" .auth.setcache cache auth string for a given host Parameters: Name Type Description host string hostname auth string auth string in format \"user:pass\" Returns: Type Description null .cookie.addcookies Add stored cookie(s) relevant to current query Parameter: Name Type Description q dict query object Returns: Type Description dict query objeect with added cookies .cookie.getcookies Get stored cookie(s) relevant to current query Parameter: Name Type Description q dict query object Returns: Type Description string cookie(s) .req.addheaders Convert headers to strings & add authorization and Content-Length Parameter: Name Type Description q dict query object Returns: Type Description dict Updated query object .req.buildquery Construct full HTTP query string from query object Parameter: Name Type Description q dict query object Returns: Type Description string HTTP query string .req.enchd Convert a KDB dictionary into HTTP headers Parameter: Name Type Description d dict dictionary of headers Returns: Type Description string string HTTP headers .req.formatresp Split HTTP response into headers & dict Parameter: Name Type Description r string raw HTTP response Returns: Type Description (dict; string; string) (response header;response body;raw headers) .req.gb Generate boundary marker Parameter: Name Type Description x any Unused Returns: Type Description string Boundary marker .req.mkpt Create one part for a multipart form Parameters: Name Type Description b string boundary marker n string name for form part v string value for form part Returns: Type Description string[] multipart form .req.mult Build multi-part object Parameters: Name Type Description b string boundary marker d dict headers (incl. file to be multiparted) Returns: Type Description string Multipart form .req.multi Convert a q dictionary to a multipart form Parameter: Name Type Description d dict kdb dictionary to convert to form Returns: Type Description (dict; string) (HTTP headers;body) to give to .req.post .req.okstatus Signal if not OK status, return unchanged response if OK Parameters: Name Type Description v boolean verbose flag x (dict; string) HTTP response object Returns: Type Description (dict; string) HTTP response object .req.parseresp Parse to kdb object based on Content-Type header. Only supports JSON currently Parameter: Name Type Description r (dict; string) HTTP respone Returns: Type Description any Parsed response .req.proxy Applies proxy if relevant Parameter: Name Type Description u dict URL object Returns: Type Description dict Updated URL object .status.class get status \"class\" from status code, header dict or return object Parameter: Name Type Description x int | dict | (dict; string) status code, header dict or return object Returns: Type Description int status class .url.dec decode a URL encoded string to a KDB dictionary Parameter: Name Type Description x string URL encoded string Returns: Type Description dict kdb dictionary to encode .url.enc encode a KDB dictionary as a URL encoded string Parameter: Name Type Description d dict kdb dictionary to encode Returns: Type Description string URL encoded string .url.format format URL object into string Parameter: Name Type Description x dict URL dictionary Returns: Type Description string URL .url.hsurl return URL as an hsym Parameter: Name Type Description x string | symbol | hsym URL File symbol Returns: Type Description hsym URL File symbol .url.hu URI escaping for non-safe chars, RFC-3986 Parameter: Name Type Description x string URL Returns: Type Description string URL .url.parse parse a string/symbol/hsym URL into a URL dictionary & parse query Parameter: Name Type Description x string | symbol | hsym URL containing query File symbol Returns: Type Description dict URL dictionary .url.parse0 parse a string/symbol/hsym URL into a URL dictionary Parameters: Name Type Description q boolean parse URL query to kdb dict x string | symbol | hsym URL containing query File symbol Returns: Type Description dict URL dictionary .url.query Parse URL query; split on ?, urldecode query Parameter: Name Type Description x string URL containing query Returns: Type Description (string; dict) (URL;parsed query) .url.sturl return URL as a string Parameter: Name Type Description x string | symbol | hsym URL File symbol Returns: Type Description string URL","title":"Private functions"},{"location":"api/md/private/#authgetauth","text":"EXPERIMENTAL prompt for authorization if requested Parameters: Name Type Description h dict HTTP response headers u string | symbol | hsym URL File symbol Returns: Type Description string updated URL with supplied credentials","title":".auth.getauth"},{"location":"api/md/private/#authgetcache","text":"get cached auth string for a given host Parameter: Name Type Description hst string hostname Returns: Type Description string cached auth string","title":".auth.getcache"},{"location":"api/md/private/#authreadnetrc","text":"retrieve login from .netrc file Parameter: Name Type Description host string hostname to get login for Returns: Type Description string auth string in format \"user:pass\"","title":".auth.readnetrc"},{"location":"api/md/private/#authsetcache","text":"cache auth string for a given host Parameters: Name Type Description host string hostname auth string auth string in format \"user:pass\" Returns: Type Description null","title":".auth.setcache"},{"location":"api/md/private/#cookieaddcookies","text":"Add stored cookie(s) relevant to current query Parameter: Name Type Description q dict query object Returns: Type Description dict query objeect with added cookies","title":".cookie.addcookies"},{"location":"api/md/private/#cookiegetcookies","text":"Get stored cookie(s) relevant to current query Parameter: Name Type Description q dict query object Returns: Type Description string cookie(s)","title":".cookie.getcookies"},{"location":"api/md/private/#reqaddheaders","text":"Convert headers to strings & add authorization and Content-Length Parameter: Name Type Description q dict query object Returns: Type Description dict Updated query object","title":".req.addheaders"},{"location":"api/md/private/#reqbuildquery","text":"Construct full HTTP query string from query object Parameter: Name Type Description q dict query object Returns: Type Description string HTTP query string","title":".req.buildquery"},{"location":"api/md/private/#reqenchd","text":"Convert a KDB dictionary into HTTP headers Parameter: Name Type Description d dict dictionary of headers Returns: Type Description string string HTTP headers","title":".req.enchd"},{"location":"api/md/private/#reqformatresp","text":"Split HTTP response into headers & dict Parameter: Name Type Description r string raw HTTP response Returns: Type Description (dict; string; string) (response header;response body;raw headers)","title":".req.formatresp"},{"location":"api/md/private/#reqgb","text":"Generate boundary marker Parameter: Name Type Description x any Unused Returns: Type Description string Boundary marker","title":".req.gb"},{"location":"api/md/private/#reqmkpt","text":"Create one part for a multipart form Parameters: Name Type Description b string boundary marker n string name for form part v string value for form part Returns: Type Description string[] multipart form","title":".req.mkpt"},{"location":"api/md/private/#reqmult","text":"Build multi-part object Parameters: Name Type Description b string boundary marker d dict headers (incl. file to be multiparted) Returns: Type Description string Multipart form","title":".req.mult"},{"location":"api/md/private/#reqmulti","text":"Convert a q dictionary to a multipart form Parameter: Name Type Description d dict kdb dictionary to convert to form Returns: Type Description (dict; string) (HTTP headers;body) to give to .req.post","title":".req.multi"},{"location":"api/md/private/#reqokstatus","text":"Signal if not OK status, return unchanged response if OK Parameters: Name Type Description v boolean verbose flag x (dict; string) HTTP response object Returns: Type Description (dict; string) HTTP response object","title":".req.okstatus"},{"location":"api/md/private/#reqparseresp","text":"Parse to kdb object based on Content-Type header. Only supports JSON currently Parameter: Name Type Description r (dict; string) HTTP respone Returns: Type Description any Parsed response","title":".req.parseresp"},{"location":"api/md/private/#reqproxy","text":"Applies proxy if relevant Parameter: Name Type Description u dict URL object Returns: Type Description dict Updated URL object","title":".req.proxy"},{"location":"api/md/private/#statusclass","text":"get status \"class\" from status code, header dict or return object Parameter: Name Type Description x int | dict | (dict; string) status code, header dict or return object Returns: Type Description int status class","title":".status.class"},{"location":"api/md/private/#urldec","text":"decode a URL encoded string to a KDB dictionary Parameter: Name Type Description x string URL encoded string Returns: Type Description dict kdb dictionary to encode","title":".url.dec"},{"location":"api/md/private/#urlenc","text":"encode a KDB dictionary as a URL encoded string Parameter: Name Type Description d dict kdb dictionary to encode Returns: Type Description string URL encoded string","title":".url.enc"},{"location":"api/md/private/#urlformat","text":"format URL object into string Parameter: Name Type Description x dict URL dictionary Returns: Type Description string URL","title":".url.format"},{"location":"api/md/private/#urlhsurl","text":"return URL as an hsym Parameter: Name Type Description x string | symbol | hsym URL File symbol Returns: Type Description hsym URL File symbol","title":".url.hsurl"},{"location":"api/md/private/#urlhu","text":"URI escaping for non-safe chars, RFC-3986 Parameter: Name Type Description x string URL Returns: Type Description string URL","title":".url.hu"},{"location":"api/md/private/#urlparse","text":"parse a string/symbol/hsym URL into a URL dictionary & parse query Parameter: Name Type Description x string | symbol | hsym URL containing query File symbol Returns: Type Description dict URL dictionary","title":".url.parse"},{"location":"api/md/private/#urlparse0","text":"parse a string/symbol/hsym URL into a URL dictionary Parameters: Name Type Description q boolean parse URL query to kdb dict x string | symbol | hsym URL containing query File symbol Returns: Type Description dict URL dictionary","title":".url.parse0"},{"location":"api/md/private/#urlquery","text":"Parse URL query; split on ?, urldecode query Parameter: Name Type Description x string URL containing query Returns: Type Description (string; dict) (URL;parsed query)","title":".url.query"},{"location":"api/md/private/#urlsturl","text":"return URL as a string Parameter: Name Type Description x string | symbol | hsym URL File symbol Returns: Type Description string URL","title":".url.sturl"},{"location":"api/md/public/","text":".auth.cache storage for basic auth credential cache .auth.netrcenabled boolean flag to determine whether to use ~/.netrc by default .auth.netrclocation location of .netrc file, by default ~/.netrc .b64.dec base64 decode a string Parameter: Name Type Description x string base64 string to be decoded Returns: Type Description string decoded string .b64.enc base64 encode a string. Where available, defaults to .Q.btoa built-in Parameter: Name Type Description x string string to be encoded Returns: Type Description string encoded string .cookie.addcookie Add or update a cookie in the jar Parameters: Name Type Description h string hostname on which to apply cookie c string cookie string Returns: Type Description null .cookie.jar storage for cookies .cookie.readjar Read a Netscape/cURL format cookiejar Parameter: Name Type Description f string | symbol | hsym filename File symbol Returns: Type Description table cookie jar .cookie.writejar Write a Netscape/cURL format cookiejar Parameters: Name Type Description f string | symbol | hsym filename File symbol j table cookie jar Returns: Type Description hsym cookie jar filename File symbol .req.del Send an HTTP DELETE request, no body Parameters: Name Type Description x symbol | string | hsym URL File symbol y dict dictionary of custom HTTP headers to use Returns: Type Description (dict; string) | any HTTP response (headers;body), or parsed if JSON .req.delete Send an HTTP DELETE request Parameters: Name Type Description x symbol | string | hsym URL File symbol y dict dictionary of custom HTTP headers to use z string body for HTTP request Returns: Type Description (dict; string) | any HTTP response (headers;body), or parsed if JSON .req.g Send an HTTP GET request (simple, no custom headers) Parameter: Name Type Description x symbol | string | hsym URL File symbol Returns: Type Description (dict; string) | any HTTP response (headers;body), or parsed if JSON .req.get Send an HTTP GET request Parameters: Name Type Description x symbol | string | hsym URL File symbol y dict dictionary of custom HTTP headers to use Returns: Type Description (dict; string) | any HTTP response (headers;body), or parsed if JSON .req.p Send an HTTP POST request (no custom headers) Parameters: Name Type Description x symbol | string | hsym URL File symbol y dict symbol of encoding to use (e.g. `json `csv ) z string | any body for HTTP request (if non-string, must be an encoder in .req.tx) Returns: Type Description (dict; string) | any HTTP response (headers;body), or parsed if JSON .req.post Send an HTTP POST request Parameters: Name Type Description x symbol | string | hsym URL File symbol y dict dictionary of custom HTTP headers to use z string body for HTTP request Returns: Type Description (dict; string) | any HTTP response (headers;body), or parsed if JSON .req.send Send an HTTP request Parameters: Name Type Description m symbol HTTP method/verb u symbol | string | hsym URL File symbol hd dict dictionary of custom HTTP headers to use p string payload/body (for POST requests) v boolean verbose flag Returns: Type Description (dict; string) HTTP response (headers;body) .req.timeout EXPERIMENTAL send a request with a client-side timeout Parameters: Name Type Description t int | long timeout (seconds) m symbol HTTP method/verb u symbol | string | hsym URL File symbol hd dict dictionary of custom HTTP headers to use p string payload/body (for POST requests) Returns: Type Description (dict; string) HTTP response (headers;body)","title":"Public functions"},{"location":"api/md/public/#authcache","text":"storage for basic auth credential cache","title":".auth.cache"},{"location":"api/md/public/#authnetrcenabled","text":"boolean flag to determine whether to use ~/.netrc by default","title":".auth.netrcenabled"},{"location":"api/md/public/#authnetrclocation","text":"location of .netrc file, by default ~/.netrc","title":".auth.netrclocation"},{"location":"api/md/public/#b64dec","text":"base64 decode a string Parameter: Name Type Description x string base64 string to be decoded Returns: Type Description string decoded string","title":".b64.dec"},{"location":"api/md/public/#b64enc","text":"base64 encode a string. Where available, defaults to .Q.btoa built-in Parameter: Name Type Description x string string to be encoded Returns: Type Description string encoded string","title":".b64.enc"},{"location":"api/md/public/#cookieaddcookie","text":"Add or update a cookie in the jar Parameters: Name Type Description h string hostname on which to apply cookie c string cookie string Returns: Type Description null","title":".cookie.addcookie"},{"location":"api/md/public/#cookiejar","text":"storage for cookies","title":".cookie.jar"},{"location":"api/md/public/#cookiereadjar","text":"Read a Netscape/cURL format cookiejar Parameter: Name Type Description f string | symbol | hsym filename File symbol Returns: Type Description table cookie jar","title":".cookie.readjar"},{"location":"api/md/public/#cookiewritejar","text":"Write a Netscape/cURL format cookiejar Parameters: Name Type Description f string | symbol | hsym filename File symbol j table cookie jar Returns: Type Description hsym cookie jar filename File symbol","title":".cookie.writejar"},{"location":"api/md/public/#reqdel","text":"Send an HTTP DELETE request, no body Parameters: Name Type Description x symbol | string | hsym URL File symbol y dict dictionary of custom HTTP headers to use Returns: Type Description (dict; string) | any HTTP response (headers;body), or parsed if JSON","title":".req.del"},{"location":"api/md/public/#reqdelete","text":"Send an HTTP DELETE request Parameters: Name Type Description x symbol | string | hsym URL File symbol y dict dictionary of custom HTTP headers to use z string body for HTTP request Returns: Type Description (dict; string) | any HTTP response (headers;body), or parsed if JSON","title":".req.delete"},{"location":"api/md/public/#reqg","text":"Send an HTTP GET request (simple, no custom headers) Parameter: Name Type Description x symbol | string | hsym URL File symbol Returns: Type Description (dict; string) | any HTTP response (headers;body), or parsed if JSON","title":".req.g"},{"location":"api/md/public/#reqget","text":"Send an HTTP GET request Parameters: Name Type Description x symbol | string | hsym URL File symbol y dict dictionary of custom HTTP headers to use Returns: Type Description (dict; string) | any HTTP response (headers;body), or parsed if JSON","title":".req.get"},{"location":"api/md/public/#reqp","text":"Send an HTTP POST request (no custom headers) Parameters: Name Type Description x symbol | string | hsym URL File symbol y dict symbol of encoding to use (e.g. `json `csv ) z string | any body for HTTP request (if non-string, must be an encoder in .req.tx) Returns: Type Description (dict; string) | any HTTP response (headers;body), or parsed if JSON","title":".req.p"},{"location":"api/md/public/#reqpost","text":"Send an HTTP POST request Parameters: Name Type Description x symbol | string | hsym URL File symbol y dict dictionary of custom HTTP headers to use z string body for HTTP request Returns: Type Description (dict; string) | any HTTP response (headers;body), or parsed if JSON","title":".req.post"},{"location":"api/md/public/#reqsend","text":"Send an HTTP request Parameters: Name Type Description m symbol HTTP method/verb u symbol | string | hsym URL File symbol hd dict dictionary of custom HTTP headers to use p string payload/body (for POST requests) v boolean verbose flag Returns: Type Description (dict; string) HTTP response (headers;body)","title":".req.send"},{"location":"api/md/public/#reqtimeout","text":"EXPERIMENTAL send a request with a client-side timeout Parameters: Name Type Description t int | long timeout (seconds) m symbol HTTP method/verb u symbol | string | hsym URL File symbol hd dict dictionary of custom HTTP headers to use p string payload/body (for POST requests) Returns: Type Description (dict; string) HTTP response (headers;body)","title":".req.timeout"},{"location":"api/md/req/","text":".req.postmulti .req.query .req.tx .req.ty","title":"Req"},{"location":"api/md/req/#reqpostmulti","text":"","title":".req.postmulti"},{"location":"api/md/req/#reqquery","text":"","title":".req.query"},{"location":"api/md/req/#reqtx","text":"","title":".req.tx"},{"location":"api/md/req/#reqty","text":"","title":".req.ty"},{"location":"api/md/variable/","text":".req.PARSE Flag for parsing output to q datatypes .req.SIGNAL Flag for signalling on HTTP errors .req.VERBOSE Flag for verbose mode .req.decompress Dictionary with decompress functions for Content-Encoding types .req.def Default headers added to all HTTP requests .req.tx Dictionary with Content-Type encoders .req.ty Dictionary with Content-Types","title":"Variables"},{"location":"api/md/variable/#reqparse","text":"Flag for parsing output to q datatypes","title":".req.PARSE"},{"location":"api/md/variable/#reqsignal","text":"Flag for signalling on HTTP errors","title":".req.SIGNAL"},{"location":"api/md/variable/#reqverbose","text":"Flag for verbose mode","title":".req.VERBOSE"},{"location":"api/md/variable/#reqdecompress","text":"Dictionary with decompress functions for Content-Encoding types","title":".req.decompress"},{"location":"api/md/variable/#reqdef","text":"Default headers added to all HTTP requests","title":".req.def"},{"location":"api/md/variable/#reqtx","text":"Dictionary with Content-Type encoders","title":".req.tx"},{"location":"api/md/variable/#reqty","text":"Dictionary with Content-Types","title":".req.ty"},{"location":"examples/aoc/","text":"Advent of Code","title":"Advent of Code"},{"location":"examples/aoc/#advent-of-code","text":"","title":"Advent of Code"},{"location":"examples/github/","text":"GitHub","title":"GitHub"},{"location":"examples/github/#github","text":"","title":"GitHub"},{"location":"examples/jira/","text":"Atlassian JIRA","title":"JIRA"},{"location":"examples/jira/#atlassian-jira","text":"","title":"Atlassian JIRA"},{"location":"examples/zoho/","text":"Zoho People HR","title":"Zoho"},{"location":"examples/zoho/#zoho-people-hr","text":"","title":"Zoho People HR"},{"location":"features/config/","text":"Configuring default behaviours .req.PARSE Controls whether standard functions ( .req.get etc.) will attempt to parse response into kdb datatypes (e.g. parsing JSON response). If disabled, raw string response will be returned with headers By default, .req.PARSE is set to 1b ; to disable parsing, set to 0b . e.g. q).req.PARSE:0b q).req.g\"http://httpbin.org/get\" `statustext`date`content-type`content-length`connection`server`access-control-allow-origin`access-control-allow-credentials`status!(\"HTTP/1.1 200 OK\";\"Fri, 05 Jun 2020 17:08:08 GMT\";\"application/json\";\"328\";\"close\";\"gunicorn/19.9.0\";,\"*.. \"{\\n \\\"args\\\": {}, \\n \\\"headers\\\": {\\n \\\"Accept\\\": \\\"*/*\\\", \\n \\\"Accept-Encoding\\\": \\\"gzip\\\", \\n \\\"Authorization\\\": \\\"Basic cmVROnJlcXBhc3M=\\\", \\n \\\"Host\\\": \\\"httpbin.org\\\", \\n \\\"User-Agent\\\": \\\"kdb+/4\\\", \\n \\\"X-Amzn.. q).req.PARSE:1b q).req.g\"http://httpbin.org/get\" args | (`symbol$())!() headers| `Accept`Accept-Encoding`Authorization`Host`User-Agent`X-Amzn-Trace-Id!(\"*/*\";\"gzip\";\"Basic cmVROnJlcXBhc3M=\";\"httpbin.org\";\"kdb+/4\";\"Root=1-5eda7bfd-92527fb727e9b8b07de0bb8a\") origin | \"90.249.66.28\" url | \"http://httpbin.org/get\" .req.SIGNAL Controls whether reQ will throw a signal when encountering an HTTP error status (i.e. 4XX status code). By default, .req.SIGNAL is set to 1b ; to disable signalling, set to 0b . e.g. q).req.SIGNAL:0b q).req.g\"http://httpbin.org/status/403\" \"\" q).req.SIGNAL:1b q).req.g\"http://httpbin.org/status/403\" '403 [2] /home/jonny/git/reQ/req/req.q:116: .req.okstatus: if[not[.req.SIGNAL]|v|x[0][`status] within 200 299;:x]; //if signalling disabled, in verbose mode or OK status, return 'string x[0]`status; //signal if bad status FIX: handle different status codes - descriptive signals ^ } [1] /home/jonny/git/reQ/req/req.q:169: .req.get:{parseresp okstatus[.req.VERBOSE] send[`GET;x;y;();.req.VERBOSE]} ^ q.req))\\","title":"Configurable defaults"},{"location":"features/config/#configuring-default-behaviours","text":"","title":"Configuring default behaviours"},{"location":"features/config/#reqparse","text":"Controls whether standard functions ( .req.get etc.) will attempt to parse response into kdb datatypes (e.g. parsing JSON response). If disabled, raw string response will be returned with headers By default, .req.PARSE is set to 1b ; to disable parsing, set to 0b . e.g. q).req.PARSE:0b q).req.g\"http://httpbin.org/get\" `statustext`date`content-type`content-length`connection`server`access-control-allow-origin`access-control-allow-credentials`status!(\"HTTP/1.1 200 OK\";\"Fri, 05 Jun 2020 17:08:08 GMT\";\"application/json\";\"328\";\"close\";\"gunicorn/19.9.0\";,\"*.. \"{\\n \\\"args\\\": {}, \\n \\\"headers\\\": {\\n \\\"Accept\\\": \\\"*/*\\\", \\n \\\"Accept-Encoding\\\": \\\"gzip\\\", \\n \\\"Authorization\\\": \\\"Basic cmVROnJlcXBhc3M=\\\", \\n \\\"Host\\\": \\\"httpbin.org\\\", \\n \\\"User-Agent\\\": \\\"kdb+/4\\\", \\n \\\"X-Amzn.. q).req.PARSE:1b q).req.g\"http://httpbin.org/get\" args | (`symbol$())!() headers| `Accept`Accept-Encoding`Authorization`Host`User-Agent`X-Amzn-Trace-Id!(\"*/*\";\"gzip\";\"Basic cmVROnJlcXBhc3M=\";\"httpbin.org\";\"kdb+/4\";\"Root=1-5eda7bfd-92527fb727e9b8b07de0bb8a\") origin | \"90.249.66.28\" url | \"http://httpbin.org/get\"","title":".req.PARSE"},{"location":"features/config/#reqsignal","text":"Controls whether reQ will throw a signal when encountering an HTTP error status (i.e. 4XX status code). By default, .req.SIGNAL is set to 1b ; to disable signalling, set to 0b . e.g. q).req.SIGNAL:0b q).req.g\"http://httpbin.org/status/403\" \"\" q).req.SIGNAL:1b q).req.g\"http://httpbin.org/status/403\" '403 [2] /home/jonny/git/reQ/req/req.q:116: .req.okstatus: if[not[.req.SIGNAL]|v|x[0][`status] within 200 299;:x]; //if signalling disabled, in verbose mode or OK status, return 'string x[0]`status; //signal if bad status FIX: handle different status codes - descriptive signals ^ } [1] /home/jonny/git/reQ/req/req.q:169: .req.get:{parseresp okstatus[.req.VERBOSE] send[`GET;x;y;();.req.VERBOSE]} ^ q.req))\\","title":".req.SIGNAL"},{"location":"features/cookies/","text":"HTTP Cookies reQ has built-in support for HTTP cookies; when a response is received with a Set-Cookie header, the relevant cookie will be stored in .cookie.jar , and then used automatically for future requests to the relevant host. Expired cookies will be ignored, although currently the Max-Age attribute is not taken into account; this will be rectified in a future update. It's also possible to use the .req.addcookie function, as demonstrated in the Advent of Code example. Setting cookies q).req.get[\"http://httpbin.org/cookies/set?abc=123&def=456\";()!()]; -- REQUEST -- GET /cookies/set?abc=123&def=456 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:49:15 GMT Content-Type: text/html; charset=utf-8 Content-Length: 223 Location: /cookies Set-Cookie: abc=123; Path=/ Set-Cookie: def=456; Path=/ Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"> <title>Redirecting...</title> <h1>Redirecting...</h1> <p>You should be redirected automatically to target URL: <a href=\"/cookies\">/cookies</a>. If not click the link. -- REQUEST -- GET /cookies HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* Cookie: abc=123; def=456 -- RESPONSE -- HTTP/1.1 200 OK Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:49:16 GMT Content-Type: application/json Content-Length: 38 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur {\"cookies\":{\"abc\":\"123\",\"def\":\"456\"}} q).cookie.jar host path name | val expires maxage secure httponly samesite ------------------------| --------------------------------------------- \"httpbin.org\" \"/*\" \"abc\"| \"123\" 0 0 \"httpbin.org\" \"/*\" \"def\"| \"456\" 0 0 Deleting cookies Cookies can be deleted or overwritten in the normal fashion, and expired cookies will be ignored. q).req.get[\"http://httpbin.org/cookies/delete?abc\";()!()]; -- REQUEST -- GET /cookies/delete?abc HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* Cookie: abc=123; def=456 -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:50:48 GMT Content-Type: text/html; charset=utf-8 Content-Length: 223 Location: /cookies Set-Cookie: abc=; Expires=Thu, 01-Jan-1970 00:00:00 GMT; Max-Age=0; Path=/ Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"> <title>Redirecting...</title> <h1>Redirecting...</h1> <p>You should be redirected automatically to target URL: <a href=\"/cookies\">/cookies</a>. If not click the link. -- REQUEST -- GET /cookies HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* Cookie: def=456 -- RESPONSE -- HTTP/1.1 200 OK Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:50:48 GMT Content-Type: application/json Content-Length: 26 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur {\"cookies\":{\"def\":\"456\"}} q).cookie.jar host path name | val expires maxage secure httponl.. ------------------------| ---------------------------------------------------.. \"httpbin.org\" \"/*\" \"abc\"| \"\" 1970.01.01T00:00:00.000 0 0 0 .. \"httpbin.org\" \"/*\" \"def\"| \"456\" 0 0 .. Compatibility with cURL/Netscape cookie jar reQ has support for reading & writing the cookie jar in the format initially developed by Netscape and utilised in cURL. See https://curl.haxx.se/docs/http-cookies.html for more details on the format. This support allows for transition from a cURL based workflow. Reading cookie jar Read cookie jar with .req.readjar : jonny@kodiak ~/git/req (master) $ more tests/cookiejar # Netscape HTTP Cookie File # https://curl.haxx.se/docs/http-cookies.html # This file was generated by reQ! Edit at your own risk. httpbin.org TRUE / FALSE 1143149359 abc 123 httpbin.org FALSE /example TRUE 0 def 123 jonny@kodiak ~/git/req (master) $ q KDB+ 3.5 2018.04.25 Copyright (C) 1993-2018 Kx Systems l64/ 4(16)core 7360MB jonny kodiak 127.0.1.1 EXPIRE 2019.05.21 jonathon.mcmurray@aquaq.co.uk KOD #4160315 q)\\l req.q q).req.readjar`:tests/cookiejar host path secure expires name val httponly maxage samesite ---------------------------------------------------------------------------------------------- \"*httpbin.org\" \"/*\" 0 2006.03.23T21:29:19.000 \"abc\" \"123\" 0 \"httpbin.org\" \"/example*\" 1 \"def\" \"123\" 0 Writing cookie jar Write cookie jar with .req.writejar : jonny@kodiak ~/git/req (master) $ q KDB+ 3.5 2018.04.25 Copyright (C) 1993-2018 Kx Systems l64/ 4(16)core 7360MB jonny kodiak 127.0.1.1 EXPIRE 2019.05.21 jonathon.mcmurray@aquaq.co.uk KOD #4160315 q)\\l req.q ... // build up reQ cookiejar q).cookie.jar host path name | val expires maxage secure httponly samesite --------------------------------| ------------------------------------------------------------- \"*httpbin.org\" \"/*\" \"abc\"| \"123\" 2006.03.23T21:29:19.000 0 0 \"httpbin.org\" \"/example*\" \"def\"| \"123\" 1 0 q).req.writejar[`:jar].cookie.jar `:jar q)\\\\ jonny@kodiak ~/git/req_bk (master) $ more jar # Netscape HTTP Cookie File # https://curl.haxx.se/docs/http-cookies.html # This file was generated by reQ! Edit at your own risk. httpbin.org TRUE / FALSE 1143149359 abc 123 httpbin.org FALSE /example TRUE 0 def 123","title":"Cookies"},{"location":"features/cookies/#http-cookies","text":"reQ has built-in support for HTTP cookies; when a response is received with a Set-Cookie header, the relevant cookie will be stored in .cookie.jar , and then used automatically for future requests to the relevant host. Expired cookies will be ignored, although currently the Max-Age attribute is not taken into account; this will be rectified in a future update. It's also possible to use the .req.addcookie function, as demonstrated in the Advent of Code example.","title":"HTTP Cookies"},{"location":"features/cookies/#setting-cookies","text":"q).req.get[\"http://httpbin.org/cookies/set?abc=123&def=456\";()!()]; -- REQUEST -- GET /cookies/set?abc=123&def=456 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:49:15 GMT Content-Type: text/html; charset=utf-8 Content-Length: 223 Location: /cookies Set-Cookie: abc=123; Path=/ Set-Cookie: def=456; Path=/ Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"> <title>Redirecting...</title> <h1>Redirecting...</h1> <p>You should be redirected automatically to target URL: <a href=\"/cookies\">/cookies</a>. If not click the link. -- REQUEST -- GET /cookies HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* Cookie: abc=123; def=456 -- RESPONSE -- HTTP/1.1 200 OK Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:49:16 GMT Content-Type: application/json Content-Length: 38 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur {\"cookies\":{\"abc\":\"123\",\"def\":\"456\"}} q).cookie.jar host path name | val expires maxage secure httponly samesite ------------------------| --------------------------------------------- \"httpbin.org\" \"/*\" \"abc\"| \"123\" 0 0 \"httpbin.org\" \"/*\" \"def\"| \"456\" 0 0","title":"Setting cookies"},{"location":"features/cookies/#deleting-cookies","text":"Cookies can be deleted or overwritten in the normal fashion, and expired cookies will be ignored. q).req.get[\"http://httpbin.org/cookies/delete?abc\";()!()]; -- REQUEST -- GET /cookies/delete?abc HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* Cookie: abc=123; def=456 -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:50:48 GMT Content-Type: text/html; charset=utf-8 Content-Length: 223 Location: /cookies Set-Cookie: abc=; Expires=Thu, 01-Jan-1970 00:00:00 GMT; Max-Age=0; Path=/ Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"> <title>Redirecting...</title> <h1>Redirecting...</h1> <p>You should be redirected automatically to target URL: <a href=\"/cookies\">/cookies</a>. If not click the link. -- REQUEST -- GET /cookies HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* Cookie: def=456 -- RESPONSE -- HTTP/1.1 200 OK Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:50:48 GMT Content-Type: application/json Content-Length: 26 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur {\"cookies\":{\"def\":\"456\"}} q).cookie.jar host path name | val expires maxage secure httponl.. ------------------------| ---------------------------------------------------.. \"httpbin.org\" \"/*\" \"abc\"| \"\" 1970.01.01T00:00:00.000 0 0 0 .. \"httpbin.org\" \"/*\" \"def\"| \"456\" 0 0 ..","title":"Deleting cookies"},{"location":"features/cookies/#compatibility-with-curlnetscape-cookie-jar","text":"reQ has support for reading & writing the cookie jar in the format initially developed by Netscape and utilised in cURL. See https://curl.haxx.se/docs/http-cookies.html for more details on the format. This support allows for transition from a cURL based workflow.","title":"Compatibility with cURL/Netscape cookie jar"},{"location":"features/cookies/#reading-cookie-jar","text":"Read cookie jar with .req.readjar : jonny@kodiak ~/git/req (master) $ more tests/cookiejar # Netscape HTTP Cookie File # https://curl.haxx.se/docs/http-cookies.html # This file was generated by reQ! Edit at your own risk. httpbin.org TRUE / FALSE 1143149359 abc 123 httpbin.org FALSE /example TRUE 0 def 123 jonny@kodiak ~/git/req (master) $ q KDB+ 3.5 2018.04.25 Copyright (C) 1993-2018 Kx Systems l64/ 4(16)core 7360MB jonny kodiak 127.0.1.1 EXPIRE 2019.05.21 jonathon.mcmurray@aquaq.co.uk KOD #4160315 q)\\l req.q q).req.readjar`:tests/cookiejar host path secure expires name val httponly maxage samesite ---------------------------------------------------------------------------------------------- \"*httpbin.org\" \"/*\" 0 2006.03.23T21:29:19.000 \"abc\" \"123\" 0 \"httpbin.org\" \"/example*\" 1 \"def\" \"123\" 0","title":"Reading cookie jar"},{"location":"features/cookies/#writing-cookie-jar","text":"Write cookie jar with .req.writejar : jonny@kodiak ~/git/req (master) $ q KDB+ 3.5 2018.04.25 Copyright (C) 1993-2018 Kx Systems l64/ 4(16)core 7360MB jonny kodiak 127.0.1.1 EXPIRE 2019.05.21 jonathon.mcmurray@aquaq.co.uk KOD #4160315 q)\\l req.q ... // build up reQ cookiejar q).cookie.jar host path name | val expires maxage secure httponly samesite --------------------------------| ------------------------------------------------------------- \"*httpbin.org\" \"/*\" \"abc\"| \"123\" 2006.03.23T21:29:19.000 0 0 \"httpbin.org\" \"/example*\" \"def\"| \"123\" 1 0 q).req.writejar[`:jar].cookie.jar `:jar q)\\\\ jonny@kodiak ~/git/req_bk (master) $ more jar # Netscape HTTP Cookie File # https://curl.haxx.se/docs/http-cookies.html # This file was generated by reQ! Edit at your own risk. httpbin.org TRUE / FALSE 1143149359 abc 123 httpbin.org FALSE /example TRUE 0 def 123","title":"Writing cookie jar"},{"location":"features/headers/","text":"HTTP Request Headers Default headers The default headers sent with requests are found in .req.def : q).req.def \"Connection\"| \"Close\" \"User-Agent\"| \"kdb+/3.5\" \"Accept\" | \"*/*\" The User-Agent header is automatically generated from the version of kdb+ (i.e. .z.K ) Custom headers One of the key features of reQ is the ability to send custom headers with HTTP requests. This is done by supplying a dictionary of custom headers as the second argument to many of the User API functions, such as .req.get , .req.post , .req.delete and .req.del For example: q).req.get[\"http://httpbin.org/headers\";`custom`headers!(\"with custom\";\"values\")] | Accept Connection Custom Headers Host User-Agent -------| ----------------------------------------------------------------- headers| \"*/*\" \"close\" \"with custom\" \"values\" \"httpbin.org\" \"kdb+/3.5\"","title":"Headers"},{"location":"features/headers/#http-request-headers","text":"","title":"HTTP Request Headers"},{"location":"features/headers/#default-headers","text":"The default headers sent with requests are found in .req.def : q).req.def \"Connection\"| \"Close\" \"User-Agent\"| \"kdb+/3.5\" \"Accept\" | \"*/*\" The User-Agent header is automatically generated from the version of kdb+ (i.e. .z.K )","title":"Default headers"},{"location":"features/headers/#custom-headers","text":"One of the key features of reQ is the ability to send custom headers with HTTP requests. This is done by supplying a dictionary of custom headers as the second argument to many of the User API functions, such as .req.get , .req.post , .req.delete and .req.del For example: q).req.get[\"http://httpbin.org/headers\";`custom`headers!(\"with custom\";\"values\")] | Accept Connection Custom Headers Host User-Agent -------| ----------------------------------------------------------------- headers| \"*/*\" \"close\" \"with custom\" \"values\" \"httpbin.org\" \"kdb+/3.5\"","title":"Custom headers"},{"location":"features/redirects/","text":"HTTP redirects reQ will automatically follow redirects, both absolute & relative. For example, Relative redirect example q).req.get[\"http://httpbin.org/relative-redirect/2\";()!()]; -- REQUEST -- GET /relative-redirect/2 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:41:53 GMT Content-Type: text/html; charset=utf-8 Content-Length: 0 Location: /relative-redirect/1 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur -- REQUEST -- GET /relative-redirect/1 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:41:54 GMT Content-Type: text/html; charset=utf-8 Content-Length: 0 Location: /get Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur -- REQUEST -- GET /get HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 200 OK Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:41:54 GMT Content-Type: application/json Content-Length: 162 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur {\"args\":{},\"headers\":{\"Accept\":\"*/*\",\"Connection\":\"close\",\"Host\":\"httpbin.org\",\"User-Agent\":\"kdb+/3.5\"},\"origin\":\"146.199.80.196\",\"url\":\"http://httpbin.org/get\"} Absolute redirect example q).req.get[\"http://httpbin.org/absolute-redirect/2\";()!()]; -- REQUEST -- GET /absolute-redirect/2 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:42:02 GMT Content-Type: text/html; charset=utf-8 Content-Length: 283 Location: http://httpbin.org/absolute-redirect/1 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"> <title>Redirecting...</title> <h1>Redirecting...</h1> <p>You should be redirected automatically to target URL: <a href=\"http://httpbin.org/absolute-redirect/1\">http://httpbin.org/absolute-redirect/1</a>. If not click the link. -- REQUEST -- GET /absolute-redirect/1 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:42:02 GMT Content-Type: text/html; charset=utf-8 Content-Length: 251 Location: http://httpbin.org/get Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"> <title>Redirecting...</h1> <p>You should be redirected automatically to target URL: <a href=\"http://httpbin.org/get\">http://httpbin.org/get</a>. If not click the link. -- REQUEST -- GET /get HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 200 OK Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:42:03 GMT Content-Type: application/json Content-Length: 162 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur {\"args\":{},\"headers\":{\"Accept\":\"*/*\",\"Connection\":\"close\",\"Host\":\"httpbin.org\",\"User-Agent\":\"kdb+/3.5\"},\"origin\":\"146.199.80.196\",\"url\":\"http://httpbin.org/get\"}","title":"HTTP redirects"},{"location":"features/redirects/#http-redirects","text":"reQ will automatically follow redirects, both absolute & relative. For example,","title":"HTTP redirects"},{"location":"features/redirects/#relative-redirect-example","text":"q).req.get[\"http://httpbin.org/relative-redirect/2\";()!()]; -- REQUEST -- GET /relative-redirect/2 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:41:53 GMT Content-Type: text/html; charset=utf-8 Content-Length: 0 Location: /relative-redirect/1 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur -- REQUEST -- GET /relative-redirect/1 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:41:54 GMT Content-Type: text/html; charset=utf-8 Content-Length: 0 Location: /get Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur -- REQUEST -- GET /get HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 200 OK Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:41:54 GMT Content-Type: application/json Content-Length: 162 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur {\"args\":{},\"headers\":{\"Accept\":\"*/*\",\"Connection\":\"close\",\"Host\":\"httpbin.org\",\"User-Agent\":\"kdb+/3.5\"},\"origin\":\"146.199.80.196\",\"url\":\"http://httpbin.org/get\"}","title":"Relative redirect example"},{"location":"features/redirects/#absolute-redirect-example","text":"q).req.get[\"http://httpbin.org/absolute-redirect/2\";()!()]; -- REQUEST -- GET /absolute-redirect/2 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:42:02 GMT Content-Type: text/html; charset=utf-8 Content-Length: 283 Location: http://httpbin.org/absolute-redirect/1 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"> <title>Redirecting...</title> <h1>Redirecting...</h1> <p>You should be redirected automatically to target URL: <a href=\"http://httpbin.org/absolute-redirect/1\">http://httpbin.org/absolute-redirect/1</a>. If not click the link. -- REQUEST -- GET /absolute-redirect/1 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:42:02 GMT Content-Type: text/html; charset=utf-8 Content-Length: 251 Location: http://httpbin.org/get Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"> <title>Redirecting...</h1> <p>You should be redirected automatically to target URL: <a href=\"http://httpbin.org/get\">http://httpbin.org/get</a>. If not click the link. -- REQUEST -- GET /get HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 200 OK Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:42:03 GMT Content-Type: application/json Content-Length: 162 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur {\"args\":{},\"headers\":{\"Accept\":\"*/*\",\"Connection\":\"close\",\"Host\":\"httpbin.org\",\"User-Agent\":\"kdb+/3.5\"},\"origin\":\"146.199.80.196\",\"url\":\"http://httpbin.org/get\"}","title":"Absolute redirect example"},{"location":"features/verbose/","text":"Verbose mode reQ includes a verbose mode which displays the raw HTTP requests & responses. This can be useful for debugging purposes, to view the full headers on both the request & response. To enable this mode, set .req.VERBOSE before making the requests. The value should be the handle to which output should be written (e.g. 1 for stdout, 2 for stderr). Examples An example including HTTP redirects i.e. multiple requests & responses, and setting .req.VERBOSE:1 within q session: jonny@kodiak ~/reQ (master) $ q req.q KDB+ 3.5 2018.04.25 Copyright (C) 1993-2018 Kx Systems l64/ 4(16)core 7360MB jonny kodiak 127.0.1.1 EXPIRE 2019.05.21 jonathon.mcmurray@aquaq.co.uk KOD #4160315 q).req.VERBOSE:1 q).req.get[\"http://httpbin.org/redirect/2\";()!()]; -- REQUEST -- GET /redirect/2 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:36:32 GMT Content-Type: text/html; charset=utf-8 Content-Length: 247 Location: /relative-redirect/1 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"> <title>Redirecting...</title> <h1>Redirecting...</h1> <p>You should be redirected automatically to target URL: <a href=\"/relative-redirect/1\">/relative-redirect/1</a>. If not click the link. -- REQUEST -- GET /relative-redirect/1 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:36:32 GMT Content-Type: text/html; charset=utf-8 Content-Length: 0 Location: /get Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur -- REQUEST -- GET /get HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 200 OK Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:36:32 GMT Content-Type: application/json Content-Length: 162 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur {\"args\":{},\"headers\":{\"Accept\":\"*/*\",\"Connection\":\"close\",\"Host\":\"httpbin.org\",\"User-Agent\":\"kdb+/3.5\"},\"origin\":\"146.199.80.196\",\"url\":\"http://httpbin.org/get\"}","title":"Verbose mode"},{"location":"features/verbose/#verbose-mode","text":"reQ includes a verbose mode which displays the raw HTTP requests & responses. This can be useful for debugging purposes, to view the full headers on both the request & response. To enable this mode, set .req.VERBOSE before making the requests. The value should be the handle to which output should be written (e.g. 1 for stdout, 2 for stderr).","title":"Verbose mode"},{"location":"features/verbose/#examples","text":"An example including HTTP redirects i.e. multiple requests & responses, and setting .req.VERBOSE:1 within q session: jonny@kodiak ~/reQ (master) $ q req.q KDB+ 3.5 2018.04.25 Copyright (C) 1993-2018 Kx Systems l64/ 4(16)core 7360MB jonny kodiak 127.0.1.1 EXPIRE 2019.05.21 jonathon.mcmurray@aquaq.co.uk KOD #4160315 q).req.VERBOSE:1 q).req.get[\"http://httpbin.org/redirect/2\";()!()]; -- REQUEST -- GET /redirect/2 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:36:32 GMT Content-Type: text/html; charset=utf-8 Content-Length: 247 Location: /relative-redirect/1 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"> <title>Redirecting...</title> <h1>Redirecting...</h1> <p>You should be redirected automatically to target URL: <a href=\"/relative-redirect/1\">/relative-redirect/1</a>. If not click the link. -- REQUEST -- GET /relative-redirect/1 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:36:32 GMT Content-Type: text/html; charset=utf-8 Content-Length: 0 Location: /get Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur -- REQUEST -- GET /get HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 200 OK Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:36:32 GMT Content-Type: application/json Content-Length: 162 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur {\"args\":{},\"headers\":{\"Accept\":\"*/*\",\"Connection\":\"close\",\"Host\":\"httpbin.org\",\"User-Agent\":\"kdb+/3.5\"},\"origin\":\"146.199.80.196\",\"url\":\"http://httpbin.org/get\"}","title":"Examples"}]}