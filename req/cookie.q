\d .cookie

jar:([host:();path:();name:()] val:();expires:`datetime$();maxage:`long$();secure:`boolean$();httponly:`boolean$();samesite:`$())  //storage for cookies

addcookie:{[h;c]
  /* add or update a cookie in the jar */
  d:(!). "S=;"0:c;                                                                  //parse cookie into dict
  n:string first key d;v:first value d;                                             //extract cookie name & value
  d:lower[key d]!value d;                                                           //make all keys lower case
  r:`host`path`name`val!(".",h;d[`path],"*";n;v);                                   //build up record
  if[`domain in key d;r[`host]:"*.",d`domain];                                      //if domain in cookie, use it for host
  r[`expires]:"Z"$" "sv@[;1 2]" "vs d`expires;                                      //parse expiration date & time
  r[`maxage]:"J"$d`$"max-age";                                                      //TODO calculate expires from maxage
  r[`secure]:`secure in key d;                                                      //check if Secure attribute is set
  r[`httponly]:`httponly in key d;                                                  //check if HttpOnly attribute is set
  r[`samesite]:`$d`samesite;                                                        //check if SameSite attribute is set
  `.cookie.jar upsert enlist r;                                                     //add cookie to the jar
 }

getcookies:{[q] /q-query object
  /* get cookies that apply for a given protocol, host & path */
  h:q`host;p:q`path;pr:q`protocol;                                                  //extact necessary components
  h:".",h;                                                                          //prevent bad tailmatching
  t:select from .cookie.jar where h like/:host,p like/:path,(expires>.z.t)|null expires;  //select all cookies that apply
  if[not pr~"https://";t:delete from t where secure];                               //delete HTTPS only cookies if not HTTPS request
  :"; "sv"="sv'flip value exec name,val from t;                                     //compile cookies into string
 }

addcookies:{[q] /q-query object
  /* add applicable cookies to query object */
  if[count c:getcookies[q`url];q[`headers;`Cookie]:c];
  :q;
 }

readjar:{[f] /f-file
  /* read a Netscape/cURL format cookiejar */
  j:read0 .url.hsurl f;                                                             //get hsym of input file & read
  j:j where not ("#"=first'[j])|0=count'[j];                                        //remove comments & empty lines
  t:flip`host`tailmatch`path`secure`expires`name`val!("*S*SJ**";"\t")0:j;           //convert to a table
  t:update host:{"*.",x}'[host] from t where tailmatch=`TRUE;                       //implement tailmatching
  t:update path:{x,"*"}'[path] from t;                                              //implement path matching
  t:update secure:secure=`TRUE from t;                                              //convert secure to boolean
  t:update expires:?[0=expires;0Nz;`datetime$`timestamp$1970.01.01D00+1e9*expires] from t; //calculate expiry
  :delete tailmatch from update httponly:0b,maxage:0Nj,samesite:` from t;           //add extra fields for reQ cookiejar
 }

writejar:{[f;j] /f-file,j-jar
  /* write a Netscape/cURL format cookiejar */
  t :"# Netscape HTTP Cookie File\n";                                               //make file header (copy cURL)
  t,:"# https://curl.haxx.se/docs/http-cookies.html\n";
  t,:"# This file was generated by reQ! Edit at your own risk.\n\n";
  t,:"\n"sv 1_"\t"0:select                                                          //convert to tab delimited & drop headers
       {("."=first x)_x}'[except\:[host;"*"]],
       `FALSE`TRUE "*"=first'[host],
       except\:[path;"*"],
       `FALSE`TRUE secure,
       ?[null expires;0;`long$1e-9*(`timestamp$expires)-1970.01.01D0],              //convert expires back to epoch time
       name,
       val 
     from j;
  :.url.hsurl[f] 0: "\n"vs t;                                                       //write to file
  }

\d .
